Index: piktomir/platform/Linux/Makefile
===================================================================
--- piktomir.orig/platform/Linux/Makefile	2013-10-23 23:14:37.610245165 +0400
+++ piktomir/platform/Linux/Makefile	2013-10-23 23:16:57.310937903 +0400
@@ -3,7 +3,7 @@
 SOURCES += $(wildcard ../../Classes/*.cpp)
 SOURCES += main.cpp
 
-SHAREDLIBS = -lcocos2d -lcocosdenshion -lcurl
+SHAREDLIBS = -lcocos2d -lcocosdenshion -lcurl -lX11 -lXrandr
 
 COCOS_LIBS = $(LIB_DIR)/libcocos2d.so $(LIB_DIR)/libcocosdenshion.so
 
Index: piktomir/platform/Linux/main.cpp
===================================================================
--- piktomir.orig/platform/Linux/main.cpp	2013-10-23 23:14:37.610245165 +0400
+++ piktomir/platform/Linux/main.cpp	2013-10-23 23:17:05.090976486 +0400
@@ -8,9 +8,11 @@
 #include <string>
 
 #include <X11/Xlib.h>
+#include<X11/extensions/Xrandr.h>
 
 USING_NS_CC;
 
+/*
 int getScreenSize(int *w, int*h)
 {
 
@@ -29,18 +31,39 @@
   return -2;
  }
 
- *w = pscr->width;
- *h = pscr->height;
+ *w = WidthOfScreen( pscr );
+ *h = HeightOfScreen( pscr );
 
  XCloseDisplay( pdsp );
  return 0;
 }
+*/
+
+int getScreenSize(int& width, int& height)
+{
+
+    int num_sizes;
+    Rotation original_rotation;
+
+    Display *dpy = XOpenDisplay(NULL);
+    Window root = RootWindow(dpy, 0);
+    XRRScreenSize *xrrs = XRRSizes(dpy, 0, &num_sizes);
+
+    XRRScreenConfiguration *conf = XRRGetScreenInfo(dpy, root);
+    SizeID original_size_id = XRRConfigCurrentConfiguration(conf, &original_rotation);
+
+    width = xrrs[original_size_id].width;
+    height = xrrs[original_size_id].height;
+
+    XCloseDisplay(dpy);
+    return 0;    //Return a value that can be used for error checking.
+  }
 
 int main(int argc, char **argv)
 {
     int w, h;
-    getScreenSize(&w, &h);
-    
+    getScreenSize(w, h);
+
     w -= 50;
     h -= 50;
     // create the application instance
